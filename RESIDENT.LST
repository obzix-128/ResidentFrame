Turbo Assembler	 Version 4.1	    03/03/25 14:55:46	    Page 1
resident.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     locals @@
      4				     org 100h
      5
      6
      7	0100			     Start:
      8	0100  E9 029B			 jmp main
      9
     10				     ;-----------------------------------------------------------------------------------------------
     11				     ------
     12				     ; Constants
     13				     ;-----------------------------------------------------------------------------------------------
     14				     ------
     15
     16	      =B800		     VIDEOSEG	  equ 0b800h   ; Адрес сегмента видеопамяти
     17	      =0370		     BIAS_FRAME	  equ 370h     ; Смещение относительно начала		    +
     18				     видеопамяти (в	байтах)
     19	      =0002		     FRAME_COLOR  equ 2	       ; Цвет рамки
     20	      =0009		     FRAME_HEIGHT equ 9	       ; Высота рамки
     21	      =000D		     FRAME_WIDTH  equ 0dh      ; Ширина рамки
     22	      =0004		     NUMBER_OF_REGISTERS equ 4 ; Количество показываемых на рамке	    +
     23				     регистров
     24
     25	0103  41 02 58 02 42 02	58+  REGISTERS db 41h, 2, 58h, 2, 42h, 2, 58h, 2, 43h, 2, 58h, 2, 44h, 2, 58h, 2 ; ax, bx, cx, dx   +
     26	      02 43 02 58 02 44	02+  зелёного цвета
     27	      58 02
     28
     29	0113  C9 CD BB BA 00 BA	C8+  RAMKA db 0c9h, 0cdh, 0bbh,	0bah, 0h, 0bah,	0c8h, 0cdh, 0bch ; Двойная рамка
     30	      CD BC
     31
     32				     ;-----------------------------------------------------------------------------------------------
     33				     ------
     34				     ; Data
     35				     ;-----------------------------------------------------------------------------------------------
     36				     ------
     37
     38	011C			     BUFFER_DISPLAY_SYMBOLS:
     39	011C  75*(0000)			 dw FRAME_WIDTH	* FRAME_HEIGHT dup(0h) ; Массив для хранения		    +
     40				     затёртой рамкой части экрана
     41
     42	0206			     BUFFER_REGISTERS:
     43	0206  08*(00000000)		 dd NUMBER_OF_REGISTERS	* 2 dup(0h) ; Массив для хранения значений +
     44				     регистров	в виде символов
     45									    ; в порядке	ax, bx,	cx, dx
     46
     47				     ;-----------------------------------------------------------------------------------------------
     48				     ------
     49				     ; Macro
     50				     ;-----------------------------------------------------------------------------------------------
     51				     ------
     52
     53				     SAVE_ALL_REGISTERS	macro
     54					 pushf
     55					 push es
     56					 push ds
     57					 push si
Turbo Assembler	 Version 4.1	    03/03/25 14:55:46	    Page 2
resident.asm



     58					 push di
     59					 push bp
     60					 push sp
     61					 push ss
     62					 push ax
     63					 push bx
     64					 push cx
     65					 push dx
     66				     endm
     67
     68				     RET_ALL_REGISTERS macro
     69					 pop dx
     70					 pop cx
     71					 pop bx
     72					 pop ax
     73					 pop ss
     74					 pop sp
     75					 pop bp
     76					 pop di
     77					 pop si
     78					 pop ds
     79					 pop es
     80					 popf
     81				     endm
     82
     83				     LOAD_REGISTERS_BUFFER macro
     84					 mov word ptr cs:[BUFFER_REGISTERS +  0	* 2], ax
     85					 mov word ptr cs:[BUFFER_REGISTERS +  1	* 2], bx
     86					 mov word ptr cs:[BUFFER_REGISTERS +  2	* 2], cx
     87					 mov word ptr cs:[BUFFER_REGISTERS +  3	* 2], dx
     88				     endm
     89
     90				     ;-----------------------------------------------------------------------------------------------
     91				     ------
     92				     ; Code
     93				     ;-----------------------------------------------------------------------------------------------
     94				     ------
     95
     96				     ;-----------------------------------------------------------------------------------------------
     97				     ------
     98				     ; Ожидает нажатия клавиши '1'	на нампаде, после	чего    +
     99				     вызывает функцию рисования	рамки
    100				     ; Entry: None
    101				     ; Exit : None
    102				     ; Destr: None
    103				     ;-----------------------------------------------------------------------------------------------
    104				     ------
    105
    106	0226			     new09   proc
    107					 SAVE_ALL_REGISTERS
1   108	0226  9C			 pushf
1   109	0227  06			 push es
1   110	0228  1E			 push ds
1   111	0229  56			 push si
1   112	022A  57			 push di
1   113	022B  55			 push bp
1   114	022C  54			 push sp
Turbo Assembler	 Version 4.1	    03/03/25 14:55:46	    Page 3
resident.asm



1   115	022D  16			 push ss
1   116	022E  50			 push ax
1   117	022F  53			 push bx
1   118	0230  51			 push cx
1   119	0231  52			 push dx
    120					 LOAD_REGISTERS_BUFFER
1   121	0232  2E: A3 0206r		 mov word ptr cs:[BUFFER_REGISTERS +  0	* 2], ax
1   122	0236  2E: 89 1E	0208r		 mov word ptr cs:[BUFFER_REGISTERS +  1	* 2], bx
1   123	023B  2E: 89 0E	020Ar		 mov word ptr cs:[BUFFER_REGISTERS +  2	* 2], cx
1   124	0240  2E: 89 16	020Cr		 mov word ptr cs:[BUFFER_REGISTERS +  3	* 2], dx
    125
    126	0245  E4 60			 in al,	60h
    127
    128	0247  3C 4F			 cmp al, 4fh
    129	0249  74 1B			 je On
    130	024B  3C 52			 cmp al, 52h
    131	024D  75 21			 jne Skip
    132	024F  2E: 8A 26	0281r		 mov ah, byte ptr cs:[Active]
    133	0254  80 FC 01			 cmp ah, 1
    134	0257  75 17			 jne Skip
    135
    136	0259  E8 0026			 call frameOff
    137	025C  2E: C6 06	0281r 00  +	 mov cs:[Active], 0
    138	      90
    139	0263  EB 0B 90			 jmp Skip
    140
    141	0266				 On:
    142	0266  2E: C6 06	0281r 01  +	 mov cs:[Active], 1
    143	      90
    144	026D  E8 0037			 call frameOn
    145
    146	0270				 Skip:
    147					     RET_ALL_REGISTERS
1   148	0270  5A			 pop dx
1   149	0271  59			 pop cx
1   150	0272  5B			 pop bx
1   151	0273  58			 pop ax
1   152	0274  17			 pop ss
1   153	0275  5C			 pop sp
1   154	0276  5D			 pop bp
1   155	0277  5F			 pop di
1   156	0278  5E			 pop si
1   157	0279  1F			 pop ds
1   158	027A  07			 pop es
1   159	027B  9D			 popf
    160
    161	027C  EA			     db	0eah
    162	027D  0000			     Old090fs dw 0
    163	027F  0000			     Old09Seg dw 0
    164
    165	0281  00			     Active db 0
    166	0282				 endp
    167
    168				     ;-----------------------------------------------------------------------------------------------
    169				     ------
    170				     ; Стирает рамку с экрана и восстанавливает старый	    +
    171				     вид.
Turbo Assembler	 Version 4.1	    03/03/25 14:55:46	    Page 4
resident.asm



    172				     ; Entry: None
    173				     ; Exit : None
    174				     ; Destr: bx, cx, dx, ds, es, di, si
    175				     ;-----------------------------------------------------------------------------------------------
    176				     ------
    177
    178	0282			     frameOff	 proc
    179	0282  FC			 cld				; Сбросил флаг направления
    180	0283  0E			 push cs
    181	0284  1F			 pop ds				; Так как	работаем в tiny, всё лежит +
    182				     в	одном сегменте
    183	0285  BE 011Cr			 lea si, BUFFER_DISPLAY_SYMBOLS	; Установил в	ds:si адрес массива	    +
    184				     для хранения данных
    185
    186	0288  BB B800			 mov bx, VIDEOSEG
    187	028B  8E C3			 mov es, bx	    ; Установил адрес сегмента видеопамяти
    188	028D  BF 0370			 mov di, BIAS_FRAME ; Установил смещение от начала экрана
    189
    190	0290  B9 000D			 mov cx, FRAME_WIDTH
    191	0293  BA 0009			 mov dx, FRAME_HEIGHT ;	Задаю счётчики по вертикали и		    +
    192				     горизонтали
    193
    194	0296				 @@DrawOneLine:
    195	0296  57			     push di
    196	0297  51			     push cx
    197	0298  F3> A5			     rep movsw ; Циклом печатаю строчку из памяти
    198	029A  59			     pop cx
    199	029B  5F			     pop di
    200
    201	029C  81 C7 00A0		     add di, 80	* 2 ; Передвигаюсь на следующую
    202
    203	02A0  4A			     dec dx
    204	02A1  83 FA 00			     cmp dx, 0 ; Проверяю не пора	ли выйти	из цикла
    205	02A4  75 F0			     jne @@DrawOneLine
    206
    207	02A6  C3			 ret
    208	02A7				 endp
    209
    210				     ;-----------------------------------------------------------------------------------------------
    211				     ------
    212				     ; Рисует рамку фиксированного размера со	значением  +
    213				     регистров	внутри
    214				     ; Entry: None
    215				     ; Exit : None
    216				     ; Destr: bx, cx, dx, ds, es, di, si
    217				     ;-----------------------------------------------------------------------------------------------
    218				     ------
    219
    220	02A7			     frameOn   proc
    221	02A7  FC			 cld ; Сбросил флаг направления
    222
    223	02A8  E8 0017			 call saveDisplay ; Сохраняю старые данные об экране
    224	02AB  0E			 push cs
    225	02AC  1F			 pop ds	; Так как	работаем в tiny, всё лежит в одном	    +
    226				     сегменте
    227
    228	02AD  BE 0113r			 lea si, [RAMKA]      ;	в ds:si положил	адрес строки	с		    +
Turbo Assembler	 Version 4.1	    03/03/25 14:55:46	    Page 5
resident.asm



    229				     символами	рамки
    230	02B0  B9 000D			 mov cx, FRAME_WIDTH  ;	Установил ширину	рамки
    231	02B3  BA 0009			 mov dx, FRAME_HEIGHT ;	Установил высоту	рамки
    232	02B6  B4 02			 mov ah, FRAME_COLOR  ;	Установил цвет рамки
    233	02B8  BF 0370			 mov di, BIAS_FRAME   ;	Установил смещение от начала экрана  +
    234				     до первого символа	рамки
    235
    236	02BB  E8 00AB			 call drawFrame	; Рисую рамку
    237
    238	02BE  E8 0025			 call drawTitle	; Рисую надпись
    239
    240	02C1  C3			 ret
    241	02C2				 endp
    242
    243				     ;-----------------------------------------------------------------------------------------------
    244				     ------
    245				     ; Сохраняет в памяти старый вид экрана
    246				     ; Entry: None
    247				     ; Exit : None
    248				     ; Destr: bx, cx, dx, ds, es, di, si, al
    249				     ;-----------------------------------------------------------------------------------------------
    250				     ------
    251
    252	02C2			     saveDisplay proc
    253	02C2  BB B800			 mov bx, VIDEOSEG
    254	02C5  8E DB			 mov ds, bx	    ; Установил адрес сегмента видеопамяти
    255	02C7  BE 0370			 mov si, BIAS_FRAME ; Установил смещение от начала экрана
    256
    257	02CA  0E			 push cs
    258	02CB  07			 pop es
    259	02CC  BF 011Cr			 lea di, BUFFER_DISPLAY_SYMBOLS	; Установил в	es:di адрес массива	    +
    260				     для хранения данных
    261
    262	02CF  B9 000D			 mov cx, FRAME_WIDTH
    263	02D2  BA 0009			 mov dx, FRAME_HEIGHT ;	Задаю счётчики по вертикали и		    +
    264				     горизонтали
    265
    266	02D5				 SaveOneLine:
    267	02D5  56			     push si
    268	02D6  51			     push cx
    269	02D7  F3> A5			     rep movsw ; Циклом сохраняю одну	строчку
    270	02D9  59			     pop cx
    271	02DA  5E			     pop si
    272
    273	02DB  81 C6 00A0		     add si, 80	* 2 ; Передвигаюсь на следующую
    274
    275	02DF  4A			     dec dx
    276	02E0  83 FA 00			     cmp dx, 0 ; Проверяю не пора	ли выйти	из цикла
    277	02E3  75 F0			     jne SaveOneLine
    278
    279	02E5  C3			 ret
    280	02E6				 endp
    281
    282				     ;-----------------------------------------------------------------------------------------------
    283				     ------
    284				     ; На рамке фиксированного размера рисует	состояние  +
    285				     регистров
Turbo Assembler	 Version 4.1	    03/03/25 14:55:46	    Page 6
resident.asm



    286				     ; Entry: None
    287				     ; Exit : None
    288				     ; Destr: es, ds, ax, bx, cx, di, si
    289				     ;-----------------------------------------------------------------------------------------------
    290				     ------
    291
    292	02E6			     drawTitle	 proc
    293	02E6  B8 B800			 mov ax, VIDEOSEG
    294	02E9  8E C0			 mov es, ax		; Устанавливаю адрес сегмента		    +
    295				     видеопамяти
    296	02EB  BF 0370			 mov di, BIAS_FRAME
    297	02EE  81 C7 00A4		 add di, 80 * 2	+ 2 * 2	; Устанавливаю нужное	смещение	    +
    298				     относительно начала экрана	и на	две строки
    299								; ниже и два столбца правее края рамки
    300	02F2  0E			 push cs
    301	02F3  1F			 pop ds
    302	02F4  BE 0103r			 lea si, [REGISTERS] ; В ds:si	положил адрес строки с именами    +
    303				     регистров
    304
    305	02F7  BB 023D			 mov bx, 023dh ; В bx положил символ '='
    306	02FA  B9 0004			 mov cx, NUMBER_OF_REGISTERS
    307
    308	02FD				 @@DrawOneReg:		; В цикле	рисую названия регистров на +
    309				     рамке
    310	02FD  57			     push di
    311	02FE  A5			     movsw
    312	02FF  A5			     movsw		; Нарисовал имя регистра
    313	0300  83 C7 02			     add di, 1 * 2	; Пропуск
    314	0303  26: 89 1D			     mov es:[di], bx	; '='
    315	0306  5F			     pop di
    316	0307  81 C7 0140		     add di, 2 * 80 * 2	; Перепрыгнул через строку
    317	030B  E2 F0			     loop @@DrawOneReg
    318
    319	030D  B9 0004			 mov cx, NUMBER_OF_REGISTERS
    320	0310  BF 0370			 mov di, BIAS_FRAME
    321	0313  81 C7 00AE		 add di, 80 * 2	+ 7 * 2	    ; Устанавливаю нужное смещение	    +
    322				     относительно начала экрана	и на	две строки
    323								    ; ниже и семь столбцов правее края   +
    324				     рамки
    325	0317  BE 0206r			 lea si, [BUFFER_REGISTERS] ; В ds:si положил адрес строки со	    +
    326				     значениями регистров
    327
    328	031A				 @@DrawOneValue:
    329	031A  57			     push di
    330	031B  51			     push cx
    331	031C  E8 000C			     call conversionOneNumber
    332	031F  59			     pop cx
    333	0320  5F			     pop di
    334	0321  83 C6 02			     add si, 2		; Перешёл на следующее значение
    335	0324  81 C7 0140		     add di, 2 * 80 * 2	; Перепрыгнул через строку
    336	0328  E2 F0			     loop @@DrawOneValue
    337
    338	032A  C3			 ret
    339	032B				 endp
    340
    341				     ;-----------------------------------------------------------------------------------------------
    342				     ------
Turbo Assembler	 Version 4.1	    03/03/25 14:55:46	    Page 7
resident.asm



    343				     ; Конвертирует	значение регистра si в	символы		    +
    344				     определённого	цвета и записывает по	адресу es:[di]
    345				     ; Entry: es:[di] -	адрес памяти	куда записать результат
    346				     ;	      ds:[si] -	значение, которое нужно конвертировать
    347				     ; Exit : None
    348				     ; Destr: di, ax, cx
    349				     ;-----------------------------------------------------------------------------------------------
    350				     ------
    351
    352	032B			     conversionOneNumber proc
    353	032B  33 C9			 xor cx, cx ; Почистил значения
    354
    355	032D				 OneSymbol:
    356	032D  8B 04			     mov ax, [si] ; Переложил в ax значение для конвертации
    357	032F  D3 E0			     shl ax, cl
    358	0331  D1 E8 D1 E8 D1 E8	D1+	     shr ax, 12	  ; Двумя командами оставил только один	    +
    359	      E8 D1 E8 D1 E8 D1	E8+  байт для конвертации его в ASCII-код
    360	      D1 E8 D1 E8 D1 E8	D1+
    361	      E8 D1 E8
    362	0349  3D 0009			     cmp ax, 9	  ; Сравнил с 9, если меньше или равно, то 0-9, +
    363				     если больше, то a-f
    364	034C  76 0A			     jbe DecimalNumber
    365	034E  77 00			     ja	HexadecimalNumber
    366
    367	0350				 HexadecimalNumber:
    368	0350  04 37			     add al, 'A' - 0ah	 ; Превратил в ASCII-код
    369	0352  B4 02			     mov ah, FRAME_COLOR ; Указал	нужный цвет
    370	0354  AB			     stosw		 ; Положил в память
    371	0355  EB 09 90			     jmp NextSymbol	 ; Прыгаю	на проверку на следующий	    +
    372				     цикл
    373
    374	0358				 DecimalNumber:
    375	0358  04 30			     add al, '0'	 ; Превратил в ASCII-код
    376	035A  B4 02			     mov ah, FRAME_COLOR ; Указал	нужный цвет
    377	035C  AB			     stosw		 ; Положил в память
    378	035D  EB 01 90			     jmp NextSymbol	 ; Прыгаю	на проверку на следующий	    +
    379				     цикл
    380
    381	0360				 NextSymbol:
    382	0360  80 C1 04			     add cl, 4	; Увеличиваю счётчик
    383	0363  80 F9 10			     cmp cl, 16	; Проверяю условие выхода
    384	0366  75 C5			     jne OneSymbol
    385
    386	0368  C3			 ret
    387	0369				 endp
    388
    389				     ;-----------------------------------------------------------------------------------------------
    390				     ------
    391				     ; Рисует рамку фиксированного размера и цвета
    392				     ; Entry: ds:si - адрес строки с символами рамки
    393				     ;		 cx - ширина рамки
    394				     ;		 dx - высота рамки
    395				     ;		 ah - цвет рамки
    396				     ;		 di - смещение до первого символа рамки
    397				     ; Exit : None
    398				     ; Destr: al, bx, si, es, di, dx
    399				     ;-----------------------------------------------------------------------------------------------
Turbo Assembler	 Version 4.1	    03/03/25 14:55:46	    Page 8
resident.asm



    400				     ------
    401
    402	0369			     drawFrame	 proc
    403	0369  83 E9 02			 sub cx, 2
    404	036C  83 EA 02			 sub dx, 2 ; Для корректной работы не учитываю края	    +
    405				     рамки
    406
    407	036F  E8 001B			 call drawLine ; Рисую первую линию рамки
    408
    409	0372				 DrawMiddle:
    410	0372  81 C7 00A0		     add di, 80	* 2 ; Делаю отступ
    411	0376  E8 0014			     call drawLine  ; Рисую линию
    412	0379  83 EE 03			     sub si, 3	    ; Возвращаю указатель на 4 символ	рамки
    413
    414	037C  4A			     dec dx
    415	037D  83 FA 00			     cmp dx, 0
    416	0380  75 F0			     jne DrawMiddle
    417
    418	0382  81 C7 00A0		 add di, 80 * 2	; Отступаю до	начала следующей	линии
    419	0386  83 C6 03			 add si, 3	; Ставлю указатель на 7 символ рамки
    420	0389  E8 0001			 call drawLine	; Рисую последнюю	линию
    421
    422	038C  C3			 ret
    423	038D				 endp
    424
    425				     ;-----------------------------------------------------------------------------------------------
    426				     ------
    427				     ; Рисует строку из символов (первый, последний и	    +
    428				     промежуточные), с заданной длинной, цветом и		    +
    429				     отступом
    430				     ; Entry: ds:si - адрес в памяти строки с рамкой
    431				     ;		 ah - цвет рамки
    432				     ;		 di - смещение
    433				     ;		 cx - ширина внутренней	части рамки
    434				     ; Exit : None
    435				     ; Destr: al, bx, si, es
    436				     ;-----------------------------------------------------------------------------------------------
    437				     ------
    438
    439	038D			     drawLine	 proc
    440	038D  51			 push cx
    441	038E  57			 push di
    442	038F  BB B800			 mov bx, VIDEOSEG
    443	0392  8E C3			 mov es, bx ; Установил адрес сегмента видеопамяти
    444
    445	0394  AC			 lodsb	   ; Загрузил в al первый символ рамки
    446	0395  AB			 stosw	   ; В	видеопамять положил значение из ax
    447
    448	0396  AC			 lodsb	   ; Загрузил в al второй символ рамки
    449	0397  F3> AB			 rep stosw ; В	видеопамять cx символов из	ax
    450
    451	0399  AC			 lodsb	   ; Загрузил в al последний символ рамки
    452	039A  AB			 stosw	   ; В	видеопамять положил значение из ax
    453
    454	039B  5F			 pop di
    455	039C  59			 pop cx
    456	039D  C3			 ret
Turbo Assembler	 Version 4.1	    03/03/25 14:55:46	    Page 9
resident.asm



    457	039E				 endp
    458
    459
    460	039E			     EOP:
    461
    462	039E			     main:
    463	039E  33 C0			 xor ax, ax
    464	03A0  8E C0			 mov es, ax
    465	03A2  BB 0024			 mov bx, 09h * 4
    466
    467	03A5  26: 8B 07			 mov ax, es:[bx]
    468	03A8  A3 027Dr			 mov Old090fs, ax
    469	03AB  26: 8B 47	02		 mov ax, es:[bx	+ 2]
    470	03AF  A3 027Fr			 mov Old09Seg, ax
    471
    472	03B2  FA			 cli
    473	03B3  26: C7 07	0226r		 mov es:[bx], offset new09
    474	03B8  0E			 push cs
    475	03B9  58			 pop ax
    476	03BA  26: 89 47	02		 mov es:[bx + 2], ax
    477	03BE  FB			 sti
    478
    479	03BF  B8 3100			 mov ax, 3100h
    480	03C2  BA 039Er			 mov dx, offset	EOP
    481	03C5  D1 EA D1 EA D1 EA	D1+	 shr dx, 4
    482	      EA
    483	03CD  42			 inc dx
    484
    485	03CE  CD 21			 int 21h
    486
    487				     end Start
Turbo Assembler	 Version 4.1	    03/03/25 14:55:46	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/03/25"
??FILENAME			  Text	 "resident"
??TIME				  Text	 "14:55:46"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@DRAWONELINE			  Near	 DGROUP:0296
@@DRAWONEREG			  Near	 DGROUP:02FD
@@DRAWONEVALUE			  Near	 DGROUP:031A
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 RESIDENT
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ACTIVE				  Byte	 DGROUP:0281
BIAS_FRAME			  Number 0370
BUFFER_DISPLAY_SYMBOLS		  Near	 DGROUP:011C
BUFFER_REGISTERS		  Near	 DGROUP:0206
CONVERSIONONENUMBER		  Near	 DGROUP:032B
DECIMALNUMBER			  Near	 DGROUP:0358
DRAWFRAME			  Near	 DGROUP:0369
DRAWLINE			  Near	 DGROUP:038D
DRAWMIDDLE			  Near	 DGROUP:0372
DRAWTITLE			  Near	 DGROUP:02E6
EOP				  Near	 DGROUP:039E
FRAMEOFF			  Near	 DGROUP:0282
FRAMEON				  Near	 DGROUP:02A7
FRAME_COLOR			  Number 0002
FRAME_HEIGHT			  Number 0009
FRAME_WIDTH			  Number 000D
HEXADECIMALNUMBER		  Near	 DGROUP:0350
MAIN				  Near	 DGROUP:039E
NEW09				  Near	 DGROUP:0226
NEXTSYMBOL			  Near	 DGROUP:0360
NUMBER_OF_REGISTERS		  Number 0004
OLD090FS			  Word	 DGROUP:027D
OLD09SEG			  Word	 DGROUP:027F
ON				  Near	 DGROUP:0266
ONESYMBOL			  Near	 DGROUP:032D
RAMKA				  Byte	 DGROUP:0113
REGISTERS			  Byte	 DGROUP:0103
SAVEDISPLAY			  Near	 DGROUP:02C2
SAVEONELINE			  Near	 DGROUP:02D5
SKIP				  Near	 DGROUP:0270
START				  Near	 DGROUP:0100
VIDEOSEG			  Number B800
Turbo Assembler	 Version 4.1	    03/03/25 14:55:46	    Page 11
Symbol Table




Macro Name

LOAD_REGISTERS_BUFFER
RET_ALL_REGISTERS
SAVE_ALL_REGISTERS

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  03D0 Word	  Public  CODE
