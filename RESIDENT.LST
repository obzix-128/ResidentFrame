Turbo Assembler	 Version 4.1	    03/05/25 20:01:53	    Page 1
resident.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     locals @@
      4				     org 100h
      5
      6
      7	0100			     Start:
      8	0100  E9 02DF			 jmp main
      9
     10				     ;-----------------------------------------------------------------------------------------------
     11				     ------
     12				     ; Constants
     13				     ;-----------------------------------------------------------------------------------------------
     14				     ------
     15
     16	      =B800		     VIDEOSEG	  equ 0b800h   ; Адрес сегмента видеопамяти
     17	      =0370		     BIAS_FRAME	  equ 370h     ; Смещение относительно начала		    +
     18				     видеопамяти (в	байтах)
     19	      =0002		     FRAME_COLOR  equ 2	       ; Цвет рамки
     20	      =0009		     FRAME_HEIGHT equ 9	       ; Высота рамки
     21	      =000D		     FRAME_WIDTH  equ 0dh      ; Ширина рамки
     22	      =0004		     NUMBER_OF_REGISTERS equ 4 ; Количество показываемых на рамке	    +
     23				     регистров
     24
     25	0103  41 02 58 02 42 02	58+  REGISTERS db 41h, 2, 58h, 2, 42h, 2, 58h, 2, 43h, 2, 58h, 2, 44h, 2, 58h, 2 ; ax, bx, cx, dx   +
     26	      02 43 02 58 02 44	02+  зелёного цвета
     27	      58 02
     28
     29	0113  C9 CD BB BA 00 BA	C8+  RAMKA db 0c9h, 0cdh, 0bbh,	0bah, 0h, 0bah,	0c8h, 0cdh, 0bch ; Двойная рамка
     30	      CD BC
     31
     32				     ;-----------------------------------------------------------------------------------------------
     33				     ------
     34				     ; Data
     35				     ;-----------------------------------------------------------------------------------------------
     36				     ------
     37
     38	011C			     BUFFER_DISPLAY_SYMBOLS:
     39	011C  75*(0000)			 dw FRAME_WIDTH	* FRAME_HEIGHT dup(0h) ; Массив для хранения		    +
     40				     затёртой рамкой части экрана
     41
     42	0206			     BUFFER_REGISTERS:
     43	0206  08*(00000000)		 dd NUMBER_OF_REGISTERS	* 2 dup(0h) ; Массив для хранения значений +
     44				     регистров	в виде символов
     45									    ; в порядке	ax, bx,	cx, dx
     46
     47				     ;-----------------------------------------------------------------------------------------------
     48				     ------
     49				     ; Macro
     50				     ;-----------------------------------------------------------------------------------------------
     51				     ------
     52
     53				     SAVE_ALL_REGISTERS	macro
     54					 pushf
     55					 push es
     56					 push ds
     57					 push si
Turbo Assembler	 Version 4.1	    03/05/25 20:01:53	    Page 2
resident.asm



     58					 push di
     59					 push bp
     60					 push sp
     61					 push ss
     62					 push ax
     63					 push bx
     64					 push cx
     65					 push dx
     66				     endm
     67
     68				     RET_ALL_REGISTERS macro
     69					 pop dx
     70					 pop cx
     71					 pop bx
     72					 pop ax
     73					 pop ss
     74					 pop sp
     75					 pop bp
     76					 pop di
     77					 pop si
     78					 pop ds
     79					 pop es
     80					 popf
     81				     endm
     82
     83				     LOAD_REGISTERS_BUFFER macro
     84					 mov word ptr cs:[BUFFER_REGISTERS +  0	* 2], ax
     85					 mov word ptr cs:[BUFFER_REGISTERS +  1	* 2], bx
     86					 mov word ptr cs:[BUFFER_REGISTERS +  2	* 2], cx
     87					 mov word ptr cs:[BUFFER_REGISTERS +  3	* 2], dx
     88				     endm
     89
     90				     ;-----------------------------------------------------------------------------------------------
     91				     ------
     92				     ; Code
     93				     ;-----------------------------------------------------------------------------------------------
     94				     ------
     95
     96				     ;-----------------------------------------------------------------------------------------------
     97				     ------
     98				     ; При нажатии на клавиатуре клавиши '1' на нампаде,	    +
     99				     изменяет переменную Active на 1 и сохраняет экран,
    100				     ; после нажатия '0' изменяет переменную Active на 0	    +
    101				     соответственно и восстанавливает экран
    102				     ; Entry: None
    103				     ; Exit : None
    104				     ; Destr: None
    105				     ;-----------------------------------------------------------------------------------------------
    106				     ------
    107
    108	0226			     new09   proc
    109					 SAVE_ALL_REGISTERS
1   110	0226  9C			 pushf
1   111	0227  06			 push es
1   112	0228  1E			 push ds
1   113	0229  56			 push si
1   114	022A  57			 push di
Turbo Assembler	 Version 4.1	    03/05/25 20:01:53	    Page 3
resident.asm



1   115	022B  55			 push bp
1   116	022C  54			 push sp
1   117	022D  16			 push ss
1   118	022E  50			 push ax
1   119	022F  53			 push bx
1   120	0230  51			 push cx
1   121	0231  52			 push dx
    122					 LOAD_REGISTERS_BUFFER
1   123	0232  2E: A3 0206r		 mov word ptr cs:[BUFFER_REGISTERS +  0	* 2], ax
1   124	0236  2E: 89 1E	0208r		 mov word ptr cs:[BUFFER_REGISTERS +  1	* 2], bx
1   125	023B  2E: 89 0E	020Ar		 mov word ptr cs:[BUFFER_REGISTERS +  2	* 2], cx
1   126	0240  2E: 89 16	020Cr		 mov word ptr cs:[BUFFER_REGISTERS +  3	* 2], dx
    127
    128	0245  E4 60			 in al,	60h
    129
    130	0247  3C 4F			 cmp al, 4fh ; Сравнивает со скан кодом '1'
    131	0249  74 1C			 je @@On     ; Если	совпадает, то включаем прогу
    132	024B  3C 52			 cmp al, 52h ; Сравнивает со скан кодом '0'
    133	024D  74 03			 je @@Off    ; Если	совпадает, то выключаем прогу,	если    +
    134				     не совпадает, значит пропускам нажатие
    135	024F  EB 2B 90			 jmp @@Skip
    136
    137	0252				 @@Off:
    138	0252  2E: 80 3E	028Dr 00	     cmp byte ptr cs:[Active], 0
    139	0258  74 22			     je	@@Skip		 ; Если программа уже выключена	    +
    140				     пропускаем нажатие
    141	025A  2E: C6 06	028Dr 00  +	     mov cs:[Active], 0
    142	      90
    143	0261  E8 0065			     call recoverDisplay ; Восстанавливаю	старые данные на	    +
    144				     экране
    145	0264  EB 16 90			     jmp @@Skip
    146
    147	0267				 @@On:
    148	0267  2E: 80 3E	028Dr 00	     cmp byte ptr cs:[Active], 0
    149	026D  75 0D			     jne @@Skip	      ;	Если программа уже включена		    +
    150				     пропускаем нажатие
    151	026F  E8 0094			     call saveDisplay ;	Сохраняю старые данные об	экране
    152	0272  2E: C6 06	028Dr 01  +	     mov cs:[Active], 1
    153	      90
    154	0279  EB 01 90			     jmp @@Skip
    155
    156	027C				 @@Skip:
    157					     RET_ALL_REGISTERS
1   158	027C  5A			 pop dx
1   159	027D  59			 pop cx
1   160	027E  5B			 pop bx
1   161	027F  58			 pop ax
1   162	0280  17			 pop ss
1   163	0281  5C			 pop sp
1   164	0282  5D			 pop bp
1   165	0283  5F			 pop di
1   166	0284  5E			 pop si
1   167	0285  1F			 pop ds
1   168	0286  07			 pop es
1   169	0287  9D			 popf
    170
    171	0288  EA			     db	0eah
Turbo Assembler	 Version 4.1	    03/05/25 20:01:53	    Page 4
resident.asm



    172	0289  0000			     Old090fs dw 0
    173	028B  0000			     Old09Seg dw 0
    174
    175	028D  00			     Active db 0
    176	028E				 endp
    177
    178				     ;-----------------------------------------------------------------------------------------------
    179				     ------
    180				     ; По переменной Active, узнаёт в каком режиме находится +
    181				     программа	(1/0 = вкл/выкл), во включённом
    182				     ; состоянии обновляет отображаемые значения		    +
    183				     регистров
    184				     ; Entry: None
    185				     ; Exit : None
    186				     ; Destr: None
    187				     ;-----------------------------------------------------------------------------------------------
    188				     ------
    189
    190	028E			     new08   proc
    191					 SAVE_ALL_REGISTERS
1   192	028E  9C			 pushf
1   193	028F  06			 push es
1   194	0290  1E			 push ds
1   195	0291  56			 push si
1   196	0292  57			 push di
1   197	0293  55			 push bp
1   198	0294  54			 push sp
1   199	0295  16			 push ss
1   200	0296  50			 push ax
1   201	0297  53			 push bx
1   202	0298  51			 push cx
1   203	0299  52			 push dx
    204
    205	029A  2E: 80 3E	028Dr 00	 cmp byte ptr cs:[Active], 0
    206	02A0  74 16			 je @@Skip
    207
    208					 LOAD_REGISTERS_BUFFER
1   209	02A2  2E: A3 0206r		 mov word ptr cs:[BUFFER_REGISTERS +  0	* 2], ax
1   210	02A6  2E: 89 1E	0208r		 mov word ptr cs:[BUFFER_REGISTERS +  1	* 2], bx
1   211	02AB  2E: 89 0E	020Ar		 mov word ptr cs:[BUFFER_REGISTERS +  2	* 2], cx
1   212	02B0  2E: 89 16	020Cr		 mov word ptr cs:[BUFFER_REGISTERS +  3	* 2], dx
    213	02B5  E8 0036			 call frameOn
    214
    215	02B8				 @@Skip:
    216					     RET_ALL_REGISTERS
1   217	02B8  5A			 pop dx
1   218	02B9  59			 pop cx
1   219	02BA  5B			 pop bx
1   220	02BB  58			 pop ax
1   221	02BC  17			 pop ss
1   222	02BD  5C			 pop sp
1   223	02BE  5D			 pop bp
1   224	02BF  5F			 pop di
1   225	02C0  5E			 pop si
1   226	02C1  1F			 pop ds
1   227	02C2  07			 pop es
1   228	02C3  9D			 popf
Turbo Assembler	 Version 4.1	    03/05/25 20:01:53	    Page 5
resident.asm



    229
    230	02C4  EA			     db	0eah
    231	02C5  0000			     Old080fs dw 0
    232	02C7  0000			     Old08Seg dw 0
    233	02C9				 endp
    234
    235				     ;-----------------------------------------------------------------------------------------------
    236				     ------
    237				     ; Стирает рамку с экрана и восстанавливает старый	    +
    238				     вид.
    239				     ; Entry: None
    240				     ; Exit : None
    241				     ; Destr: bx, cx, dx, ds, es, di, si
    242				     ;-----------------------------------------------------------------------------------------------
    243				     ------
    244
    245	02C9			     recoverDisplay  proc
    246	02C9  FC			 cld				; Сбросил флаг направления
    247	02CA  0E			 push cs
    248	02CB  1F			 pop ds				; Так как	работаем в tiny, всё лежит +
    249				     в	одном сегменте
    250	02CC  BE 011Cr			 lea si, BUFFER_DISPLAY_SYMBOLS	; Установил в	ds:si адрес массива	    +
    251				     для хранения данных
    252
    253	02CF  BB B800			 mov bx, VIDEOSEG
    254	02D2  8E C3			 mov es, bx	    ; Установил адрес сегмента видеопамяти
    255	02D4  BF 0370			 mov di, BIAS_FRAME ; Установил смещение от начала экрана
    256
    257	02D7  B9 000D			 mov cx, FRAME_WIDTH
    258	02DA  BA 0009			 mov dx, FRAME_HEIGHT ;	Задаю счётчики по вертикали и		    +
    259				     горизонтали
    260
    261	02DD				 @@DrawOneLine:
    262	02DD  57			     push di
    263	02DE  51			     push cx
    264	02DF  F3> A5			     rep movsw ; Циклом печатаю строчку из памяти
    265	02E1  59			     pop cx
    266	02E2  5F			     pop di
    267
    268	02E3  81 C7 00A0		     add di, 80	* 2 ; Передвигаюсь на следующую
    269
    270	02E7  4A			     dec dx
    271	02E8  83 FA 00			     cmp dx, 0 ; Проверяю не пора	ли выйти	из цикла
    272	02EB  75 F0			     jne @@DrawOneLine
    273
    274	02ED  C3			 ret
    275	02EE				 endp
    276
    277				     ;-----------------------------------------------------------------------------------------------
    278				     ------
    279				     ; Рисует рамку фиксированного размера со	значением  +
    280				     регистров	внутри
    281				     ; Entry: None
    282				     ; Exit : None
    283				     ; Destr: bx, cx, dx, ds, es, di, si
    284				     ;-----------------------------------------------------------------------------------------------
    285				     ------
Turbo Assembler	 Version 4.1	    03/05/25 20:01:53	    Page 6
resident.asm



    286
    287	02EE			     frameOn   proc
    288	02EE  FC			 cld ; Сбросил флаг направления
    289
    290	02EF  0E			 push cs
    291	02F0  1F			 pop ds	; Так как	работаем в tiny, всё лежит в одном	    +
    292				     сегменте
    293
    294	02F1  BE 0113r			 lea si, [RAMKA]      ;	в ds:si положил	адрес строки	с		    +
    295				     символами	рамки
    296	02F4  B9 000D			 mov cx, FRAME_WIDTH  ;	Установил ширину	рамки
    297	02F7  BA 0009			 mov dx, FRAME_HEIGHT ;	Установил высоту	рамки
    298	02FA  B4 02			 mov ah, FRAME_COLOR  ;	Установил цвет рамки
    299	02FC  BF 0370			 mov di, BIAS_FRAME   ;	Установил смещение от начала экрана  +
    300				     до первого символа	рамки
    301
    302	02FF  E8 00AB			 call drawFrame	; Рисую рамку
    303
    304	0302  E8 0025			 call drawTitle	; Рисую надпись
    305
    306	0305  C3			 ret
    307	0306				 endp
    308
    309				     ;-----------------------------------------------------------------------------------------------
    310				     ------
    311				     ; Сохраняет в памяти старый вид экрана
    312				     ; Entry: None
    313				     ; Exit : None
    314				     ; Destr: bx, cx, dx, ds, es, di, si, al
    315				     ;-----------------------------------------------------------------------------------------------
    316				     ------
    317
    318	0306			     saveDisplay proc
    319	0306  BB B800			 mov bx, VIDEOSEG
    320	0309  8E DB			 mov ds, bx	    ; Установил адрес сегмента видеопамяти
    321	030B  BE 0370			 mov si, BIAS_FRAME ; Установил смещение от начала экрана
    322
    323	030E  0E			 push cs
    324	030F  07			 pop es
    325	0310  BF 011Cr			 lea di, BUFFER_DISPLAY_SYMBOLS	; Установил в	es:di адрес массива	    +
    326				     для хранения данных
    327
    328	0313  B9 000D			 mov cx, FRAME_WIDTH
    329	0316  BA 0009			 mov dx, FRAME_HEIGHT ;	Задаю счётчики по вертикали и		    +
    330				     горизонтали
    331
    332	0319				 SaveOneLine:
    333	0319  56			     push si
    334	031A  51			     push cx
    335	031B  F3> A5			     rep movsw ; Циклом сохраняю одну	строчку
    336	031D  59			     pop cx
    337	031E  5E			     pop si
    338
    339	031F  81 C6 00A0		     add si, 80	* 2 ; Передвигаюсь на следующую
    340
    341	0323  4A			     dec dx
    342	0324  83 FA 00			     cmp dx, 0 ; Проверяю не пора	ли выйти	из цикла
Turbo Assembler	 Version 4.1	    03/05/25 20:01:53	    Page 7
resident.asm



    343	0327  75 F0			     jne SaveOneLine
    344
    345	0329  C3			 ret
    346	032A				 endp
    347
    348				     ;-----------------------------------------------------------------------------------------------
    349				     ------
    350				     ; На рамке фиксированного размера рисует	состояние  +
    351				     регистров
    352				     ; Entry: None
    353				     ; Exit : None
    354				     ; Destr: es, ds, ax, bx, cx, di, si
    355				     ;-----------------------------------------------------------------------------------------------
    356				     ------
    357
    358	032A			     drawTitle	 proc
    359	032A  B8 B800			 mov ax, VIDEOSEG
    360	032D  8E C0			 mov es, ax		; Устанавливаю адрес сегмента		    +
    361				     видеопамяти
    362	032F  BF 0370			 mov di, BIAS_FRAME
    363	0332  81 C7 00A4		 add di, 80 * 2	+ 2 * 2	; Устанавливаю нужное	смещение	    +
    364				     относительно начала экрана	и на	две строки
    365								; ниже и два столбца правее края рамки
    366	0336  0E			 push cs
    367	0337  1F			 pop ds
    368	0338  BE 0103r			 lea si, [REGISTERS] ; В ds:si	положил адрес строки с именами    +
    369				     регистров
    370
    371	033B  BB 023D			 mov bx, 023dh ; В bx положил символ '='
    372	033E  B9 0004			 mov cx, NUMBER_OF_REGISTERS
    373
    374	0341				 @@DrawOneReg:		; В цикле	рисую названия регистров на +
    375				     рамке
    376	0341  57			     push di
    377	0342  A5			     movsw
    378	0343  A5			     movsw		; Нарисовал имя регистра
    379	0344  83 C7 02			     add di, 1 * 2	; Пропуск
    380	0347  26: 89 1D			     mov es:[di], bx	; '='
    381	034A  5F			     pop di
    382	034B  81 C7 0140		     add di, 2 * 80 * 2	; Перепрыгнул через строку
    383	034F  E2 F0			     loop @@DrawOneReg
    384
    385	0351  B9 0004			 mov cx, NUMBER_OF_REGISTERS
    386	0354  BF 0370			 mov di, BIAS_FRAME
    387	0357  81 C7 00AE		 add di, 80 * 2	+ 7 * 2	    ; Устанавливаю нужное смещение	    +
    388				     относительно начала экрана	и на	две строки
    389								    ; ниже и семь столбцов правее края   +
    390				     рамки
    391	035B  BE 0206r			 lea si, [BUFFER_REGISTERS] ; В ds:si положил адрес строки со	    +
    392				     значениями регистров
    393
    394	035E				 @@DrawOneValue:
    395	035E  57			     push di
    396	035F  51			     push cx
    397	0360  E8 000C			     call conversionOneNumber
    398	0363  59			     pop cx
    399	0364  5F			     pop di
Turbo Assembler	 Version 4.1	    03/05/25 20:01:53	    Page 8
resident.asm



    400	0365  83 C6 02			     add si, 2		; Перешёл на следующее значение
    401	0368  81 C7 0140		     add di, 2 * 80 * 2	; Перепрыгнул через строку
    402	036C  E2 F0			     loop @@DrawOneValue
    403
    404	036E  C3			 ret
    405	036F				 endp
    406
    407				     ;-----------------------------------------------------------------------------------------------
    408				     ------
    409				     ; Конвертирует	значение регистра si в	символы		    +
    410				     определённого	цвета и записывает по	адресу es:[di]
    411				     ; Entry: es:[di] -	адрес памяти	куда записать результат
    412				     ;	      ds:[si] -	значение, которое нужно конвертировать
    413				     ; Exit : None
    414				     ; Destr: di, ax, cx
    415				     ;-----------------------------------------------------------------------------------------------
    416				     ------
    417
    418	036F			     conversionOneNumber proc
    419	036F  33 C9			 xor cx, cx ; Почистил значения
    420
    421	0371				 OneSymbol:
    422	0371  8B 04			     mov ax, [si] ; Переложил в ax значение для конвертации
    423	0373  D3 E0			     shl ax, cl
    424	0375  D1 E8 D1 E8 D1 E8	D1+	     shr ax, 12	  ; Двумя командами оставил только один	    +
    425	      E8 D1 E8 D1 E8 D1	E8+  байт для конвертации его в ASCII-код
    426	      D1 E8 D1 E8 D1 E8	D1+
    427	      E8 D1 E8
    428	038D  3D 0009			     cmp ax, 9	  ; Сравнил с 9, если меньше или равно, то 0-9, +
    429				     если больше, то a-f
    430	0390  76 0A			     jbe DecimalNumber
    431	0392  77 00			     ja	HexadecimalNumber
    432
    433	0394				 HexadecimalNumber:
    434	0394  04 37			     add al, 'A' - 0ah	 ; Превратил в ASCII-код
    435	0396  B4 02			     mov ah, FRAME_COLOR ; Указал	нужный цвет
    436	0398  AB			     stosw		 ; Положил в память
    437	0399  EB 09 90			     jmp NextSymbol	 ; Прыгаю	на проверку на следующий	    +
    438				     цикл
    439
    440	039C				 DecimalNumber:
    441	039C  04 30			     add al, '0'	 ; Превратил в ASCII-код
    442	039E  B4 02			     mov ah, FRAME_COLOR ; Указал	нужный цвет
    443	03A0  AB			     stosw		 ; Положил в память
    444	03A1  EB 01 90			     jmp NextSymbol	 ; Прыгаю	на проверку на следующий	    +
    445				     цикл
    446
    447	03A4				 NextSymbol:
    448	03A4  80 C1 04			     add cl, 4	; Увеличиваю счётчик
    449	03A7  80 F9 10			     cmp cl, 16	; Проверяю условие выхода
    450	03AA  75 C5			     jne OneSymbol
    451
    452	03AC  C3			 ret
    453	03AD				 endp
    454
    455				     ;-----------------------------------------------------------------------------------------------
    456				     ------
Turbo Assembler	 Version 4.1	    03/05/25 20:01:53	    Page 9
resident.asm



    457				     ; Рисует рамку фиксированного размера и цвета
    458				     ; Entry: ds:si - адрес строки с символами рамки
    459				     ;		 cx - ширина рамки
    460				     ;		 dx - высота рамки
    461				     ;		 ah - цвет рамки
    462				     ;		 di - смещение до первого символа рамки
    463				     ; Exit : None
    464				     ; Destr: al, bx, si, es, di, dx
    465				     ;-----------------------------------------------------------------------------------------------
    466				     ------
    467
    468	03AD			     drawFrame	 proc
    469	03AD  83 E9 02			 sub cx, 2
    470	03B0  83 EA 02			 sub dx, 2 ; Для корректной работы не учитываю края	    +
    471				     рамки
    472
    473	03B3  E8 001B			 call drawLine ; Рисую первую линию рамки
    474
    475	03B6				 DrawMiddle:
    476	03B6  81 C7 00A0		     add di, 80	* 2 ; Делаю отступ
    477	03BA  E8 0014			     call drawLine  ; Рисую линию
    478	03BD  83 EE 03			     sub si, 3	    ; Возвращаю указатель на 4 символ	рамки
    479
    480	03C0  4A			     dec dx
    481	03C1  83 FA 00			     cmp dx, 0
    482	03C4  75 F0			     jne DrawMiddle
    483
    484	03C6  81 C7 00A0		 add di, 80 * 2	; Отступаю до	начала следующей	линии
    485	03CA  83 C6 03			 add si, 3	; Ставлю указатель на 7 символ рамки
    486	03CD  E8 0001			 call drawLine	; Рисую последнюю	линию
    487
    488	03D0  C3			 ret
    489	03D1				 endp
    490
    491				     ;-----------------------------------------------------------------------------------------------
    492				     ------
    493				     ; Рисует строку из символов (первый, последний и	    +
    494				     промежуточные), с заданной длинной, цветом и		    +
    495				     отступом
    496				     ; Entry: ds:si - адрес в памяти строки с рамкой
    497				     ;		 ah - цвет рамки
    498				     ;		 di - смещение
    499				     ;		 cx - ширина внутренней	части рамки
    500				     ; Exit : None
    501				     ; Destr: al, bx, si, es
    502				     ;-----------------------------------------------------------------------------------------------
    503				     ------
    504
    505	03D1			     drawLine	 proc
    506	03D1  51			 push cx
    507	03D2  57			 push di
    508	03D3  BB B800			 mov bx, VIDEOSEG
    509	03D6  8E C3			 mov es, bx ; Установил адрес сегмента видеопамяти
    510
    511	03D8  AC			 lodsb	   ; Загрузил в al первый символ рамки
    512	03D9  AB			 stosw	   ; В	видеопамять положил значение из ax
    513
Turbo Assembler	 Version 4.1	    03/05/25 20:01:53	    Page 10
resident.asm



    514	03DA  AC			 lodsb	   ; Загрузил в al второй символ рамки
    515	03DB  F3> AB			 rep stosw ; В	видеопамять cx символов из	ax
    516
    517	03DD  AC			 lodsb	   ; Загрузил в al последний символ рамки
    518	03DE  AB			 stosw	   ; В	видеопамять положил значение из ax
    519
    520	03DF  5F			 pop di
    521	03E0  59			 pop cx
    522	03E1  C3			 ret
    523	03E2				 endp
    524
    525
    526	03E2			     EOP:
    527
    528	03E2			     main:
    529	03E2  33 C0			 xor ax, ax
    530	03E4  8E C0			 mov es, ax
    531	03E6  BB 0024			 mov bx, 09h * 4
    532	03E9  BF 0020			 mov di, 08h * 4
    533
    534	03EC  26: 8B 07			 mov ax, es:[bx]
    535	03EF  A3 0289r			 mov Old090fs, ax
    536	03F2  26: 8B 47	02		 mov ax, es:[bx	+ 2]
    537	03F6  A3 028Br			 mov Old09Seg, ax
    538
    539	03F9  26: 8B 05			 mov ax, es:[di]
    540	03FC  A3 02C5r			 mov Old080fs, ax
    541	03FF  26: 8B 45	02		 mov ax, es:[di	+ 2]
    542	0403  A3 02C7r			 mov Old08Seg, ax
    543
    544	0406  FA			 cli
    545	0407  0E			 push cs
    546	0408  58			 pop ax
    547	0409  26: C7 07	0226r		 mov es:[bx], offset new09
    548	040E  26: 89 47	02		 mov es:[bx + 2], ax
    549
    550	0412  26: C7 05	028Er		 mov es:[di], offset new08
    551	0417  26: 89 45	02		 mov es:[di + 2], ax
    552	041B  FB			 sti
    553
    554	041C  B8 3100			 mov ax, 3100h
    555	041F  BA 03E2r			 mov dx, offset	EOP
    556	0422  D1 EA D1 EA D1 EA	D1+	 shr dx, 4
    557	      EA
    558	042A  42			 inc dx
    559
    560	042B  CD 21			 int 21h
    561
    562				     end Start
Turbo Assembler	 Version 4.1	    03/05/25 20:01:53	    Page 11
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/05/25"
??FILENAME			  Text	 "resident"
??TIME				  Text	 "20:01:53"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@DRAWONELINE			  Near	 DGROUP:02DD
@@DRAWONEREG			  Near	 DGROUP:0341
@@DRAWONEVALUE			  Near	 DGROUP:035E
@@OFF				  Near	 DGROUP:0252
@@ON				  Near	 DGROUP:0267
@@SKIP				  Near	 DGROUP:027C
@@SKIP				  Near	 DGROUP:02B8
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 RESIDENT
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ACTIVE				  Byte	 DGROUP:028D
BIAS_FRAME			  Number 0370
BUFFER_DISPLAY_SYMBOLS		  Near	 DGROUP:011C
BUFFER_REGISTERS		  Near	 DGROUP:0206
CONVERSIONONENUMBER		  Near	 DGROUP:036F
DECIMALNUMBER			  Near	 DGROUP:039C
DRAWFRAME			  Near	 DGROUP:03AD
DRAWLINE			  Near	 DGROUP:03D1
DRAWMIDDLE			  Near	 DGROUP:03B6
DRAWTITLE			  Near	 DGROUP:032A
EOP				  Near	 DGROUP:03E2
FRAMEON				  Near	 DGROUP:02EE
FRAME_COLOR			  Number 0002
FRAME_HEIGHT			  Number 0009
FRAME_WIDTH			  Number 000D
HEXADECIMALNUMBER		  Near	 DGROUP:0394
MAIN				  Near	 DGROUP:03E2
NEW08				  Near	 DGROUP:028E
NEW09				  Near	 DGROUP:0226
NEXTSYMBOL			  Near	 DGROUP:03A4
NUMBER_OF_REGISTERS		  Number 0004
OLD080FS			  Word	 DGROUP:02C5
OLD08SEG			  Word	 DGROUP:02C7
OLD090FS			  Word	 DGROUP:0289
OLD09SEG			  Word	 DGROUP:028B
ONESYMBOL			  Near	 DGROUP:0371
RAMKA				  Byte	 DGROUP:0113
RECOVERDISPLAY			  Near	 DGROUP:02C9
REGISTERS			  Byte	 DGROUP:0103
SAVEDISPLAY			  Near	 DGROUP:0306
SAVEONELINE			  Near	 DGROUP:0319
Turbo Assembler	 Version 4.1	    03/05/25 20:01:53	    Page 12
Symbol Table



START				  Near	 DGROUP:0100
VIDEOSEG			  Number B800

Macro Name

LOAD_REGISTERS_BUFFER
RET_ALL_REGISTERS
SAVE_ALL_REGISTERS

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  042D Word	  Public  CODE
